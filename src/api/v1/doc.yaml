openapi: 3.0.0
info:
  description: |
    Simple XO Game
  version: "1.0"
  title: XO Game API
  contact:
    name: Danila Volkov
    email: hi@dvlkv.ru
    url: https://github.com/mrmld
servers:
  - url: /api/v1/

components:
  securitySchemes:
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user id
        name:
          type: string
          description: The user name
        email:
          type: string
          description: The user email
    Token:
      type: object
      properties:
        token:
          type: string
          description: The user JWT token
    PaginatedCollection:
      type: object
      properties:
        total:
          type: integer
          description: Total items count
        cursor:
          oneOf:
          - type: integer
          - type: string
    Game:
      type: object
      properties:
        id:
          type: integer
        uid:
          type: integer
        size:
          type: integer
        next_seq:
          type: integer
        ended:
          type: boolean
        duration:
          type: integer
        winner:
          type: integer
        started_at:
          type: integer
        field:
          type: array
          items:
            type: array
            items:
              type: integer
    GameMove:
        type: object
        properties:
          id:
            type: string
          game_id:
            type: integer
          seq:
            type: integer
          uid:
            type: integer
          x:
            type: integer
          y:
            type: integer
          time:
            type: integer
    GameWithMoves:
      allOf:
        - $ref: '#/components/schemas/Game'
        - properties:
            moves:
              $ref: '#/components/schemas/GameMove'
    GenericError:
      type: object
      properties:
        error:
          type: boolean
        text:
          type: string
    FieldError:
      allOf:
        - $ref: "#/components/schemas/GenericError"
        - properties:
            field:
              type: string

security:
  - BearerAuth: []

paths:
  /account:
    description: Methods for managing user account
    get:
      description: Gets current user if authorized
      tags:
        - Account
      responses:
        "200":
          description: Successful operation. Return user json object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized access error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Unexpected server error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    post:
      description: Creates user
      tags:
        - Account
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        "200":
          description: Successful operation. Return user json object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized access error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "400":
          description: Invalid input. Returns error object with invalid field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldError'
        "409":
          description: User already exists error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Unexpected server error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /auth:
    post:
      security: []
      description: Authorizes user
      tags:
        - Auth
      requestBody:
        description: Auth data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful operation. Return jwt token object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "400":
          description: Invalid input. Returns error object with invalid field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldError'
        "500":
          description: Unexpected server error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /games:
    get:
      description: Get user games
      tags:
        - Game
      parameters:
        - name: count
          in: query
          schema:
            type: integer
        - name: from
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation. Returns history of user games
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedCollection'
                - properties:
                    items:
                      type: array
                      items:
                        $ref: '#/components/schemas/Game'
        "401":
          description: Unauthorized access error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: "Unexpected server error. Returns error object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    post:
      description: Start a new game
      tags:
        - Game
      requestBody:
        description: Game object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                size:
                  type: integer
      responses:
        "200":
          description: Successful operation. Returns game object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameWithMoves'
        "400":
          description: Invalid input. Returns error object with invalid field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldError'
        "401":
          description: Unauthorized access error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: "Unexpected server error. Returns error object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  "/games/{id}":
    get:
      description: Gets game by specified id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Game
      responses:
        "200":
          description: Successful operation. Returns game object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameWithMoves'
        "401":
          description: Unauthorized access error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: "Unexpected server error. Returns error object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

    post:
      description: Make a move
      tags:
        - Game
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Move object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                x:
                  type: integer
                y:
                  type: integer
                seq:
                  type: integer
      responses:
        "200":
          description: Successful operation. Returns game object and moves
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameWithMoves'
        "400":
          description: "Invalid parameters. Returns error object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldError'
        "500":
          description: "Unexpected server error. Returns error object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "401":
          description: Unauthorized access error. Returns error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'